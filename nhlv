#!/usr/bin/python
"""
This project provides a CLI interface into streaming NHL games from NHL.tv.

Includes code borrowed and modified from the following projects:

- https://github.com/eracknaphobia/plugin.video.nhlgcl (Kodi plugin)
- https://github.com/NHLGames/nhl.py

Todo:
  - Add ncurses ui (maybe?). There are advantages in the simplicity of a one-shot CLI approach,
    although it would be nice to have a richer interface.

"""

import argparse
import json
import logging
import os
import requests
import sys
import time

from datetime import datetime
from datetime import timedelta

import mlbam.auth as auth
import mlbam.config as config
import mlbam.gamedata as gamedata
import mlbam.stream as common
import mlbam.util as util


LOG = None  # initialized in init_logging


help_header = """NHL game tracker and stream viewer.
"""
help_footer = """See README.md for full usage instructions and pre-requisites.
              
Feed Identifiers
You can use either the short form feed identifier or the long form:

    {}""".format(gamedata.get_feedtype_keystring())


def main(argv=None):
    nhl_gamedata = gamedata.NHLGameData()

    # using argparse (2.7+) https://docs.python.org/2/library/argparse.html
    parser = argparse.ArgumentParser(description=help_header, epilog=help_footer,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-d", "--date", help="Display games for date. Format: yyyy-mm-dd")
    parser.add_argument("--days", type=int, default=1, help="Number of days to display")
    parser.add_argument("--tomorrow", action="store_true", help="Use tomorrow's date")
    parser.add_argument("--yesterday", action="store_true", help="Use yesterday's date")
    parser.add_argument("-t", "--team", help="Play game for team, one of: {}".format(nhl_gamedata.TEAM_CODES))
    parser.add_argument("-f", "--feed",
                        help=("Feed type, either a live/archive game feed or highlight feed "
                              "(if available). Available feeds are shown in game list,"
                              "and have a short form and long form (see 'Feed identifiers' section below)"))
    parser.add_argument("--favs", help=("Favourite teams, a comma-separated list of favourite teams "
                                        "(normally specified in config file)"))
    parser.add_argument("--filter", action="store_true", help="Filter output for favourite teams only")
    parser.add_argument("-r", "--resolution",
                        help="Stream resolution for streamlink, one of: {}".format(config.BANDWIDTH_CHOICES))
    parser.add_argument("-s", "--scores", action="store_true",
                        help="Show scores (default off; overrides config file)")
    parser.add_argument("-n", "--no-scores", action="store_true",
                        help="Do not show scores (default on; overrides config file)")
    parser.add_argument("--username", help="NHL.tv username. Required for live/archived games.")
    parser.add_argument("--password", help="NHL.tv password. Required for live/archived games.")
    parser.add_argument("--use-rogers", help="Use rogers form of NHL.tv authentication")
    parser.add_argument("--fetch", action="store_true", help="Save stream to file instead of playing")
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase output verbosity")
    parser.add_argument("-D", "--debug", action="store_true", help="Turn on debug output")
    args = parser.parse_args()
    
    team_to_play = None
    feedtype = None

    # get our config
    config.CONFIG = config.NHLConfig()

    # append log files if DEBUG is set (from top of file)
    util.init_logging(os.path.join(config.CONFIG.dir,
                                   os.path.splitext(os.path.basename(sys.argv[0]))[0] + '.log'), True)

    global LOG
    LOG = logging.getLogger(__name__)

    if args.debug:
        config.CONFIG.parser['debug'] = 'true'
    if args.verbose:
        config.CONFIG.parser['verbose'] = 'true'
    if args.username:
        config.CONFIG.parser['username'] = args.username
    if args.password:
        config.CONFIG.parser['password'] = args.password
    if args.team:
        team_to_play = args.team.lower()
        if team_to_play not in nhl_gamedata.TEAM_CODES:
            util.die('Invalid team code: {}'.format(team_to_play))
    if args.feed:
        feedtype = nhl_gamedata.convert_to_long_feedtype(args.feed.lower())
    if args.resolution:
        config.CONFIG.parser['resolution'] = args.resolution
    if args.scores:
        config.CONFIG.parser['scores'] = 'true'
    elif args.no_scores:
        config.CONFIG.parser['scores'] = 'false'
    if args.favs:
        config.CONFIG.parser['favs'] = args.favs
    if args.filter:
        config.CONFIG.parser['filter'] = 'true'

    if args.yesterday:
        args.date = datetime.strftime(datetime.today() - timedelta(days=1), "%Y-%m-%d")
    elif args.tomorrow:
        args.date = datetime.strftime(datetime.today() + timedelta(days=1), "%Y-%m-%d")
    elif args.date is None:
        args.date = datetime.strftime(datetime.today(), "%Y-%m-%d")

    game_data_list = nhl_gamedata.show_game_data(args.date, args.days)
    if len(game_data_list) > 0:
        game_data = game_data_list[0]
    else:
        LOG.info('No game data for {}'.format(args.date))
        return 0

    if team_to_play is None:
        # nothing to play; we're done
        return 0

    return common.play_stream(game_data, team_to_play, feedtype, args.date, args.fetch, auth.nhl_login)


if __name__ == "__main__" or __name__ == "main":
    sys.exit(main())

# vim: set filetype=python
