#!/usr/bin/python
"""
This project provides a CLI interface into streaming NHL games from NHL.tv.

Includes code borrowed and modified from the following projects:

- https://github.com/eracknaphobia/plugin.video.nhlgcl (Kodi plugin)
- https://github.com/NHLGames/nhl.py

Todo:
  - Add ncurses ui (maybe?). There are advantages in the simplicity of a one-shot CLI approach,
    although it would be nice to have a richer interface.

"""

import argparse
import json
import logging
import os
import requests
import sys
import time

from datetime import datetime
from datetime import timedelta

import mlbam.common as common
import mlbam.config as config
import mlbam.auth as auth
import mlbam.util as util


TEAM_CODES = ('ana', 'ari', 'bos', 'buf', 'car', 'cbj', 'cgy', 'chi', 'col', 'dal', 'det', 'edm', 'fla', 'lak',
              'min', 'mtl', 'njd', 'nsh', 'nyi', 'nyr', 'ott', 'phi', 'pit', 'sjs', 'stl', 'tbl', 'tor', 'van', 
              'vgk', 'wpg', 'wsh')

FEEDTYPE_MAP = {
    'away': 'away',
    'home': 'home',
    'french': 'fr',
    'national': 'nat',
    'condensed': 'cond',
    'recap': 'recap',
}

LOG = None  # initialized in init_logging


def convert_feedtype_to_short(feedtype):
    if feedtype in FEEDTYPE_MAP:
        return FEEDTYPE_MAP[feedtype]


def convert_to_long_feedtype(feed):
    if feed in FEEDTYPE_MAP:
        return feed
    for feedtype in FEEDTYPE_MAP:
        if FEEDTYPE_MAP[feedtype] == feed:
            return feedtype
    return feed


def get_game_data(date_str=None, overwrite_json=True):
    if date_str is None:
        date_str = time.strftime("%Y-%m-%d")
    if config.SAVE_JSON_FILE_BY_TIMESTAMP:
        json_file = os.path.join(config.CONFIG.dir, 'gamedata-{}.json'.format(time.strftime("%Y-%m-%d-%H%M")))
    else:
        json_file = os.path.join(config.CONFIG.dir, 'gamedata.json')
    if overwrite_json or not os.path.exists(json_file):
        LOG.debug('Getting game data...')
        # query nhl.com for today's schedule
        headers = {
            'User-Agent': config.CONFIG.ua_iphone,
            'Connection': 'close'
        }
        url = ('{0}/schedule?&startDate={1}&endDate={1}&expand='
               'schedule.teams,schedule.linescore,schedule.game.content.media.epg').format(config.CONFIG.api_url,
                                                                                           date_str)
        util.log_http(url, 'get', headers, sys._getframe().f_code.co_name)
        r = requests.get(url, headers=headers, cookies=auth.load_cookies(), verify=config.VERIFY_SSL)
        
        with open(json_file, 'w') as f:  # write date to json_file
            f.write(r.text)

    with open(json_file) as games_file:
        json_data = json.load(games_file)

    game_data = dict()  # we return this dictionary
    
    if json_data['dates'] is None or len(json_data['dates']) < 1:
        LOG.debug("get_game_data: no game data for {}".format(date_str))
        return None

    for game in json_data['dates'][0]['games']:
        # LOG.debug('game: {}'.format(game))
        game_pk_str = str(game['gamePk'])
        game_data[game_pk_str] = dict()
        game_rec = game_data[game_pk_str]
        game_rec['game_pk'] = game_pk_str
        game_rec['abstractGameState'] = str(game['status']['abstractGameState'])  # Preview, Live, Final
        game_rec['detailedState'] = str(game['status']['detailedState'])  # is something like: Scheduled, Live, Final, In Progress, Critical
        game_rec['nhldate'] = datetime.strptime(str(game['gameDate']), "%Y-%m-%dT%H:%M:%SZ")
        game_rec['away_name'] = str(game['teams']['away']['team']['name'])
        game_rec['away_abbrev'] = str(game['teams']['away']['team']['abbreviation'].lower())
        game_rec['away_score'] = str(game['teams']['away']['score'])
        game_rec['home_name'] = str(game['teams']['home']['team']['name'])
        game_rec['home_abbrev'] = str(game['teams']['home']['team']['abbreviation'].lower())
        game_rec['home_score'] = str(game['teams']['home']['score'])
        game_rec['favourite'] = common.is_fav(game_rec)
        # game_rec['nhltv_link'] = 'http://nhl.com/tv/{0}/'.format(game_pk_str)

        # linescore
        game_rec['linescore'] = dict()
        game_rec['linescore']['currentPeriod'] = str(game['linescore']['currentPeriod'])
        if 'currentPeriodOrdinal' in game['linescore']:
            game_rec['linescore']['currentPeriodOrdinal'] = str(game['linescore']['currentPeriodOrdinal']) # : "2nd", "OT", "SO"
            game_rec['linescore']['currentPeriodTimeRemaining'] = str(game['linescore']['currentPeriodTimeRemaining']) # : "18:58", "Final"
            game_rec['linescore']['hasShootout'] = bool(game['linescore']['hasShootout'])
        else:
            game_rec['linescore']['currentPeriodOrdinal'] = 'Not Started'
            game_rec['linescore']['currentPeriodTimeRemaining'] = '20:00'
            game_rec['linescore']['hasShootout'] = False

        # epg
        game_rec['feed'] = dict()
        for media in game['content']['media']['epg']:
            if media['title'] == 'NHLTV':
                for stream in media['items']:
                    if stream['mediaFeedType'] != 'COMPOSITE' and stream['mediaFeedType'] != 'ISO':
                        feedtype = str(stream['mediaFeedType']).lower()  # home, away, national, french, ...
                        game_rec['feed'][feedtype] = dict()
                        game_rec['feed'][feedtype]['mediaPlaybackId'] = str(stream['mediaPlaybackId'])
                        game_rec['feed'][feedtype]['eventId'] = str(stream['eventId'])
            elif media['title'] == 'Extended Highlights':
                feedtype = 'condensed'
                if len(media['items']) > 0:
                    game_rec['feed'][feedtype] = dict()
                    stream = media['items'][0]
                    game_rec['feed'][feedtype]['mediaPlaybackId'] = str(stream['mediaPlaybackId'])
                    for playback_item in stream['playbacks']:
                        if playback_item['name'] == config.CONFIG.playback_scenario:
                            game_rec['feed'][feedtype]['playback_url'] = playback_item['url']
            elif media['title'] == 'Recap':
                feedtype = 'recap'
                if len(media['items']) > 0:
                    game_rec['feed'][feedtype] = dict()
                    stream = media['items'][0]
                    game_rec['feed'][feedtype]['mediaPlaybackId'] = str(stream['mediaPlaybackId'])
                    for playback_item in stream['playbacks']:
                        if playback_item['name'] == config.CONFIG.playback_scenario:
                            game_rec['feed'][feedtype]['playback_url'] = playback_item['url']
    return game_data


def show_game_data(game_date, num_days=1):
    game_data_list = list()
    for i in range(0, num_days):
        game_data = get_game_data(game_date)
        if game_data is not None:
            game_data_list.append(game_data)
            if len(game_data_list) > 1:
                print('')  # add line feed between days
            live_game_pks = list()
            for game_pk in game_data:
                if game_data[game_pk]['abstractGameState'] == 'Live':
                    if common.filter_favs(game_data[game_pk]) is not None:
                        live_game_pks.append(game_pk)
            
            # print header
            date_hdr = '{:7}{}'.format('','{}'.format(game_date))
            show_scores = config.CONFIG.parser.getboolean('scores')
            if show_scores:
                print("{:63} | {:^5} | {:^9} | {}".format(date_hdr, 'Score', 'State', 'Feeds'))
                print("{}|{}|{}|{}".format('-' * 64, '-' * 7, '-' * 11, '-' * 12))
            else:
                print("{:63} | {:^9} | {}".format(date_hdr, 'State', 'Feeds'))
                print("{}|{}|{}".format('-' * 64, '-' * 11, '-' * 12))

            if len(live_game_pks) > 0:
                if show_scores:
                    print("{:63} |{}|{}|{}".format('Live Games:', ' ' * 7, ' ' * 11, ' ' * 12))
                else:
                    print("{:63} |{}|{}".format('Live Games:', ' ' * 11, ' ' * 12))
                for game_pk in live_game_pks:
                    if common.filter_favs(game_data[game_pk]) is not None:
                        show_game_details(game_pk, game_data[game_pk])
                if show_scores:
                    print("{:63} |{}|{}|{}".format('-----', ' ' * 7, ' ' * 11, ' ' * 12))
                else:
                    print("{:63} |{}|{}".format('-----', ' ' * 11, ' ' * 12))
            for game_pk in game_data:
                if game_data[game_pk]['abstractGameState'] != 'Live':
                    if common.filter_favs(game_data[game_pk]) is not None:
                        show_game_details(game_pk, game_data[game_pk])
        else:
            LOG.info("No game data for {}".format(game_date))

        game_date = datetime.strftime(datetime.strptime(game_date, "%Y-%m-%d") + timedelta(days=1), "%Y-%m-%d")
        
    return game_data_list


def show_game_details(game_pk, game_rec):
    color_on = ''
    color_off = ''
    if common.is_fav(game_rec):
        if config.CONFIG.parser['fav_colour'] != '':
            color_on = util.fg_ansi_colour(config.CONFIG.parser['fav_colour'])
            color_off = util.ANSI_CONTROL_CODES['reset']
    show_scores = config.CONFIG.parser.getboolean('scores')
    game_info_str = "{}: {} ({}) at {} ({})".format(util.convert_time_to_local(game_rec['nhldate']),
                                                    game_rec['away_name'], game_rec['away_abbrev'].upper(), 
                                                    game_rec['home_name'], game_rec['home_abbrev'].upper())
    game_state = ''
    game_state_color_on = color_on
    game_state_color_off = color_off
    if game_rec['abstractGameState'] not in ('Preview', ):
        if not show_scores:
            game_state = game_rec['abstractGameState']
            if 'In Progress - ' in game_rec['detailedState']:
                game_state = game_rec['detailedState'].split('In Progress - ')[-1]
            elif game_rec['detailedState'] not in ('Live', 'Final', 'Scheduled', 'In Progress'):
                game_state = game_rec['detailedState']
        else:
            if 'Critical' in game_rec['detailedState']:
                game_state_color_on = util.fg_ansi_colour(config.CONFIG.parser['game_critical_colour'])
                game_state_color_off = util.ANSI_CONTROL_CODES['reset']
            if game_rec['linescore']['currentPeriodTimeRemaining'] == 'Final' \
                    and game_rec['linescore']['currentPeriodOrdinal'] == '3rd':
                game_state = 'Final'
            else:
                game_state = '{} {}'.format(game_rec['linescore']['currentPeriodTimeRemaining'].title(),
                                            game_rec['linescore']['currentPeriodOrdinal'])
    # else:
    #    game_state = 'Pending'
    short_feeds = list()
    for feed in game_rec['feed'].keys():
        short_feeds.append(convert_feedtype_to_short(feed))
    short_feed_str = ', '.join(sorted(short_feeds))
    if config.CONFIG.parser.getboolean('scores'):
        score = ''
        if game_rec['abstractGameState'] not in ('Preview', ):
            score = '{}-{}'.format(game_rec['away_score'], game_rec['home_score'])
        print("{0}{2:<63}{1} | {0}{3:^5}{1} | {4}{5:<9}{6} | {0}{7}{1}".format(color_on, color_off,
                                                                               game_info_str, score,
                                                                               game_state_color_on,
                                                                               game_state,
                                                                               game_state_color_off,
                                                                               short_feed_str))
                                                                               #', '.join(sorted(game_rec['feed'].keys()))))
    else:
        print("{0}{2:<63}{1} | {0}{3:^9}{1} | {0}{4}{1}".format(color_on, color_off,
                                                                game_info_str, game_state,
                                                                ', '.join(sorted(game_rec['feed'].keys()))))
    if config.CONFIG.parser.getboolean('debug') and config.CONFIG.parser.getboolean('verbose'):
        for feedtype in game_rec['feed']:
            print('    {}: {}  [game_pk:{}, mediaPlaybackId:{}]'.format(feedtype,
                                                                        game_rec['abstractGameState'],
                                                                        game_pk,
                                                                        game_rec['feed'][feedtype]['mediaPlaybackId']))


def main(argv=None):
    help_header = """NHL game tracker and stream viewer.
    """
    help_footer = """See README.md for full usage instructions and pre-requisites.
    """
    # using argparse (2.7+) https://docs.python.org/2/library/argparse.html
    parser = argparse.ArgumentParser(description=help_header, epilog=help_footer)
    parser.add_argument("-d", "--date", help="Display games for date. Format: yyyy-mm-dd")
    parser.add_argument("--days", type=int, default=1, help="Number of days to display")
    parser.add_argument("--tomorrow", action="store_true", help="Use tomorrow's date")
    parser.add_argument("--yesterday", action="store_true", help="Use yesterday's date")
    parser.add_argument("-t", "--team", help="Play game for team, one of: {}".format(TEAM_CODES))
    parser.add_argument("-f", "--feed", help=("Feed type, either a live/archive game feed or highlight feed "
                                              "(if available). Available feeds are shown in game list."))
    parser.add_argument("--favs", help=("Favourite teams, a comma-separated list of favourite teams "
                                        "(normally specified in config file)"))
    parser.add_argument("--filter", action="store_true", help="Filter output for favourite teams only")
    parser.add_argument("-r", "--resolution",
                        help="Stream resolution for streamlink, one of: {}".format(config.BANDWIDTH_CHOICES))
    parser.add_argument("-s", "--scores", action="store_true",
                        help="Show scores (default off; overrides config file)")
    parser.add_argument("-n", "--no-scores", action="store_true",
                        help="Do not show scores (default on; overrides config file)")
    parser.add_argument("--username", help="NHL.tv username. Required for live/archived games.")
    parser.add_argument("--password", help="NHL.tv password. Required for live/archived games.")
    parser.add_argument("--use-rogers", help="Use rogers form of NHL.tv authentication")
    parser.add_argument("--record", action="store_true", help="Save stream to file instead of playing")
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase output verbosity")
    parser.add_argument("-D", "--debug", action="store_true", help="Turn on debug output")
    args = parser.parse_args()
    
    team_to_play = None
    feedtype = None

    # get our config
    config.CONFIG = config.NHLConfig()

    # append log files if DEBUG is set (from top of file)
    util.init_logging(os.path.join(config.CONFIG.dir,
                                   os.path.splitext(os.path.basename(sys.argv[0]))[0] + '.log'), True)

    global LOG
    LOG = logging.getLogger(__name__)

    if args.debug:
        config.CONFIG.parser['debug'] = 'true'
    if args.verbose:
        config.CONFIG.parser['verbose'] = 'true'
    if args.username:
        config.CONFIG.parser['username'] = args.username
    if args.password:
        config.CONFIG.parser['password'] = args.password
    if args.team:
        team_to_play = args.team.lower()
        if team_to_play not in TEAM_CODES:
            util.die('Invalid team code: {}'.format(team_to_play))
    if args.feed:
        feedtype = convert_to_long_feedtype(args.feed.lower())
    if args.resolution:
        config.CONFIG.parser['resolution'] = args.resolution
    if args.scores:
        config.CONFIG.parser['scores'] = 'true'
    elif args.no_scores:
        config.CONFIG.parser['scores'] = 'false'
    if args.favs:
        config.CONFIG.parser['favs'] = args.favs
    if args.filter:
        config.CONFIG.parser['filter'] = 'true'

    if args.yesterday:
        args.date = datetime.strftime(datetime.today() - timedelta(days=1), "%Y-%m-%d")
    elif args.tomorrow:
        args.date = datetime.strftime(datetime.today() + timedelta(days=1), "%Y-%m-%d")
    elif args.date is None:
        args.date = datetime.strftime(datetime.today(), "%Y-%m-%d")

    game_data_list = show_game_data(args.date, args.days)
    if len(game_data_list) > 0:
        game_data = game_data_list[0]
    else:
        LOG.info('No game data for {}'.format(args.date))
        return 0

    if team_to_play is None:
        # nothing to play; we're done
        return 0

    return common.play_stream(game_data, team_to_play, feedtype, args.date, args.record, auth.nhl_login)


if __name__ == "__main__" or __name__ == "main":
    sys.exit(main())

# vim: set filetype=python
